{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNNVIjY0tdUH2bfovqYl//a",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/namans-git/iit_intern/blob/main/uniform_minimum_var_unbiased_est\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bias Function and Unbiased estimators"
      ],
      "metadata": {
        "id": "Ru5gEIqZos1A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In statistics, **the bias function** (bias of an estimator) is the difference between the estimator's expected value and the true value of the parameter being estimated. If an overestimate or underestimate happens, the mean of the difference is called a “bias.”\n",
        "\n",
        "* That’s just saying if the estimator (i.e. the sample mean) equals the parameter (i.e. the population mean), then it’s an unbiased estimator.\n",
        "\n",
        "* An estimator of decision rule with **zero bias** is called ***unbiased***.\n",
        "\n",
        "Bias is an objective property of an estimator, but we should remember that Bias is different from consistency. Consistent estimators converge in probability to the true value of the parameter, but may be biased or unbiased.\n",
        "\n",
        "***An estimator is said to be unbiased if its bias is equal to zero for all values of parameter Θ***, or equivalently, if the expected value of the estimator matches that of the parameter."
      ],
      "metadata": {
        "id": "ua_2AvWalCWn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "UMVUE"
      ],
      "metadata": {
        "id": "QQfbc3Ksox_-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Uniformly minimum-variance unbiased estimator (UMVUE) is an unbiased estimator that has ***lower variance than any other unbiased estimator for all possible values of the parameter.***"
      ],
      "metadata": {
        "id": "uspI-o2Om3Ta"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For a normal distribution with unknown mean and variance, the ***sample mean*** and ***(unbiased) sample variance*** are the ***MVUEs*** for the population mean and population variance.\n",
        "\n",
        "However, the sample standard deviation is ***not*** unbiased for the population standard deviation."
      ],
      "metadata": {
        "id": "24cYyVR7oRQP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#import libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (11, 5)\n",
        "import scipy.stats\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "yroEzv_r5HHF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A_wNCdGhuXJH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "outputId": "5da19c7c-2172-405f-81d5-27ae96e0a141"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 792x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## random normal distribution\n",
        "\n",
        "mean = 0\n",
        "std = 5\n",
        "n_points = 500\n",
        "data = np.random.normal(mean,std,n_points)\n",
        "ax = sns.distplot(data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "MLE ~"
      ],
      "metadata": {
        "id": "3yFP7tSK5lFf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Formula for mean using MLE: $\\mu_{ML} =  \\frac{1}{N}\\sum_{n=1}^{N}x_n$"
      ],
      "metadata": {
        "id": "LSY13pJXyA90"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mu_ML = 1/n_points*sum(data)\n",
        "print(\"Maximum Likelihood estimation of the mean is \" + str(mu_ML))\n",
        "print(\"The actual mean is \"+ str(mean))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dkx4IrXB5kAR",
        "outputId": "7aa89278-005c-4e30-976e-effaf3d0ae04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum Likelihood estimation of the mean is -0.28821985418277973\n",
            "The actual mean is 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Formula for variance using MLE:\n",
        "$\\sigma^{2}_{ML} =  \\frac{1}{N}\\sum_{n=1}^{N}(x_n - \\mu_{ML})^{2}$"
      ],
      "metadata": {
        "id": "dG6HGwuiy4fl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "var_ML = (1/n_points)*sum([(x-mu_ML)**2 for x in data])\n",
        "print(\"Maximum likelihood estimation of variance is \"+str(var_ML))\n",
        "print(\"True variance is \" + str(std**2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y3X7VQz95tV9",
        "outputId": "e163ca19-b6f7-4ab6-810f-2d5d068eeb06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum likelihood estimation of variance is 25.15626427819045\n",
            "True variance is 25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "UMVUE ~"
      ],
      "metadata": {
        "id": "c5BYFs_N6voV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "same formula as MLE for normal distribution"
      ],
      "metadata": {
        "id": "7VMtrQJm6z00"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mu_umvue = 1/n_points*sum(data)\n",
        "print(\"umvue estimation of the mean is \" + str(mu_umvue))\n",
        "print(\"The actual mean is \"+ str(mean))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xFN2WcyF6xf2",
        "outputId": "83735e38-d294-4c8b-ea75-9ea5a6998ed0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "umvue estimation of the mean is -0.28821985418277973\n",
            "The actual mean is 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "umvue formula for var (normal distribution) in case mu is known is the same as MLE"
      ],
      "metadata": {
        "id": "h04a24l77Etj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "var_umvue = (1/n_points)*sum([(x-mu_umvue)**2 for x in data])\n",
        "print(\"Umvue estimation of variance is \"+str(var_umvue))\n",
        "print(\"True variance is \" + str(std**2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CeOn-4pH7Ak3",
        "outputId": "2171534d-e424-4681-ca9f-e2d0ebf15d48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Umvue estimation of variance is 25.15626427819045\n",
            "True variance is 25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thus, the UMVUE for $\\sigma^{2}$ in the $μ$ known case is $\\hat\\sigma^{2} =  \\frac{1}{n}\\sum_{i=1}^{n}(X_i - \\mu)^{2}$"
      ],
      "metadata": {
        "id": "TyyXSeL_1XlM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "and the UMVUE for $\\sigma^{2}$ in the $μ$ known case is $S^{2} =  \\frac{1}{n-1}\\sum_{i=1}^{n}(X_i - \\overline{X})^{2}$"
      ],
      "metadata": {
        "id": "1T5Z91Pp2ozP"
      }
    }
  ]
}